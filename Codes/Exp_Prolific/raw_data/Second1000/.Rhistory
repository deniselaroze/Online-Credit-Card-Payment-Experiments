y = "Count") +
theme_minimal()
# Correct answer by question
# Define the questions and their correct answers
questions <- c("LateFees1", "LateFees2", "FL1", "FL2", "FL3")
correct_answers <- c(LateFees1 = "$37", LateFees2 = "$1,355", FL1 = "More than $102", FL2 = "Less than today", FL3 = "False")
# Create a dataframe for the correct answers to facilitate comparison
correct_answers_df <- as.data.frame(correct_answers, stringsAsFactors = FALSE)
names(correct_answers_df) <- "CorrectAnswer"
# Function to count correct responses per question
count_correct_per_question <- function(question) {
sum(df[[question]] == correct_answers[question], na.rm = TRUE)
}
# Apply the function to each question
correct_counts <- sapply(questions, count_correct_per_question)
# Create the final table
final_table <- data.frame(Question = questions, People_Correct = correct_counts)
rownames(final_table) <- final_table$Question
final_table$Question <- NULL  # Optionally remove the Question column since it's now the rowname
correct_answers_question = final_table
# Print the result
print(final_table)
View(df[,c("condition","sliderCounts", "sliderValue", "tableClickButton")])
######## Otros graficos ##########
# Check for and combine main columns into "Decision"
df <- df %>%
rowwise() %>%
mutate(Decision = list(na.omit(c(Control, SB, Table, SliderLow, SliderHigh)))) %>%
mutate(Decision = ifelse(length(Decision) == 1, unlist(Decision), "ERROR"))
# Check for and combine _TEXT columns into "Decision_Other"
df <- df %>%
rowwise() %>%
mutate(Decision_Other = list(na.omit(c(Control_3_TEXT, SB_3_TEXT, Table_3_TEXT, SliderLow_6_TEXT, SliderHigh_6_TEXT)))) %>%
mutate(Decision_Other = ifelse(length(Decision_Other) <= 1, unlist(Decision_Other), "ERROR"))
# Ungroup the dataframe
df <- df %>%
ungroup()
# Columna pago
df <- df %>%
mutate(Payment = case_when(
Decision == "Statement balance" ~ 1678,
Decision == "Minimum payment" ~ 34,
Decision == "Other amount ($)" ~ as.numeric(Decision_Other),
TRUE ~ NA_real_  # for any other cases
))
# Pago rango
df <- df %>%
mutate(Payment_range = cut(Payment,
breaks = c(0, 34, 35, 1678, 1679),
labels = c("Less than 34", "34", "34 to 1677", "1678"),
right = FALSE))
# Create the bar plot
ggplot(df, aes(x = Payment_range)) +
geom_bar() +
labs(title = "Frequency of Payment Ranges",
x = "Payment Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot with grouped bars for each condition
ggplot(df, aes(x = Payment_range, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Frequency of Payment Ranges by Condition",
x = "Payment Range",
y = "Count",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df$Payment
table(df$Payment)
levels(df$condition)
df$condition
df$condition
table(df$condition)
# reorder levels
df$condition <- as.factor(df$condition)
df$condition <- factor(df$condition, levels = c("Control", "SB", "Table", "SliderLow", "SliderHigh"))
# Check for and combine main columns into "Decision"
df <- df %>%
rowwise() %>%
mutate(Decision = list(na.omit(c(Control, SB, Table, SliderLow, SliderHigh)))) %>%
mutate(Decision = ifelse(length(Decision) == 1, unlist(Decision), "ERROR"))
# Check for and combine _TEXT columns into "Decision_Other"
df <- df %>%
rowwise() %>%
mutate(Decision_Other = list(na.omit(c(Control_3_TEXT, SB_3_TEXT, Table_3_TEXT, SliderLow_6_TEXT, SliderHigh_6_TEXT)))) %>%
mutate(Decision_Other = ifelse(length(Decision_Other) <= 1, unlist(Decision_Other), "ERROR"))
# Ungroup the dataframe
df <- df %>%
ungroup()
# Columna pago
df <- df %>%
mutate(Payment = case_when(
Decision == "Statement balance" ~ 1678,
Decision == "Minimum payment" ~ 34,
Decision == "Other amount ($)" ~ as.numeric(Decision_Other),
TRUE ~ NA_real_  # for any other cases
))
# Pago rango
df <- df %>%
mutate(Payment_range = cut(Payment,
breaks = c(0, 34, 35, 1678, 1679),
labels = c("Less than 34", "34", "34 to 1677", "1678"),
right = FALSE))
# Create the bar plot
ggplot(df, aes(x = Payment_range)) +
geom_bar() +
labs(title = "Frequency of Payment Ranges",
x = "Payment Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot with grouped bars for each condition
ggplot(df, aes(x = Payment_range, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Frequency of Payment Ranges by Condition",
x = "Payment Range",
y = "Count",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
table(df$condition)
# Pago rango
df <- df %>%
mutate(Payment_range = cut(Payment,
breaks = c(0, 34, 35, 1678, 1679),
labels = c("Less than 34", "34", "34 to 1677", "1678"),
right = FALSE))
# Create the bar plot
ggplot(df, aes(x = Payment_range)) +
geom_bar() +
labs(title = "Frequency of Payment Ranges",
x = "Payment Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot with grouped bars for each condition
ggplot(df, aes(x = Payment_range, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Frequency of Payment Ranges by Condition",
x = "Payment Range",
y = "Count",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot
ggplot(df, aes(x = Payment_range)) +
geom_bar() +
labs(title = "Frequency of Payment Ranges",
x = "Payment Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot with grouped bars for each condition
ggplot(df, aes(x = Payment_range, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Frequency of Payment Ranges by Condition",
x = "Payment Range",
y = "Count",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert df$condition to a factor with specified levels
df$condition <- factor(df$condition, levels = c("Control", "SB", "Table", "SliderLow", "SliderHigh"))
# Calculate the proportions for each Payment_range within each condition
df_proportions <- df %>%
group_by(condition, Payment_range) %>%
summarise(count = n()) %>%
mutate(proportion = count / sum(count) * 100)
# Create the bar plot with proportions
ggplot(df_proportions, aes(x = Payment_range, y = proportion, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Percentage of Payment Ranges by Condition",
x = "Payment Range",
y = "Percentage",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df_proportions)
df$Payment
df$Payment
df$condition
table(df$condition)
df$Payment
table(df$Payment)
sum(table(df$Payment))
####### SETUP #######
rm(list=ls())
library(dplyr)
library(htmltools)
library(kableExtra)
library(knitr)
library(htmlTable)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
# location
setwd("/Users/rodrigoguerra/Library/Mobile Documents/com~apple~CloudDocs/Paper Credito/Second1000")
####### DATA PREPROCESSING #######
# Load
qualtrics <- read.csv("Fondef_Ex4_June 4, 2024_14.42.csv",na.strings=c(''))
prolific <- read.csv("prolific_export_665f3028396367c4afb4b1d6.csv",na.strings=c(''))
# Clean first row
qualtrics <- qualtrics[c(-1,-2),]
qualtrics <- qualtrics %>%
filter(!is.na(PROLIFIC_PID) & STUDY_ID == "665f3028396367c4afb4b1d6")
condition_na <- qualtrics %>%
filter(is.na(condition))
qualtrics <- qualtrics %>%
filter(!is.na(condition))
# Check for duplicates in qualtrics
## 65aead8916eb9b7185ed25f3 toma dos veces, dos condiciones distintas -> eliminar y no pagar
qualtrics <- qualtrics %>%
filter(PROLIFIC_PID != "65aead8916eb9b7185ed25f3")
## Personas que tomaron dos veces la encuestas, debe tener 0 filas
duplicates_qualtrics <- qualtrics %>%
group_by(PROLIFIC_PID) %>%
filter(n() > 1) %>%
ungroup()
# Listar aquellos que estan solo en prolific o solo en qualtrics
qualtrics_not_in_prolific <- anti_join(qualtrics, prolific,
by = c("PROLIFIC_PID" = "Participant.id"))
prolific_not_in_qualtrics <- anti_join(prolific, qualtrics,
by = c("Participant.id" = "PROLIFIC_PID"))
rm(duplicates_qualtrics,
qualtrics_not_in_prolific,
prolific_not_in_qualtrics,
condition_na)
# Merge
df <- merge(qualtrics, prolific,
by.x = "PROLIFIC_PID", by.y = "Participant.id",
all.x = TRUE)
# Check status
table(df$Status.y)
rare_status <- df %>%
filter(Status.y == "RETURNED" | Status.y == "TIMED-OUT")
# No completition code
no_code <- df[df$Completion.code=="NOCODE",]
####### TIMES CONDITION #######
# Condition
# Calculate time differences and rename the column
df <- df %>%
mutate(Time_Diff_Condition = as.numeric(Time_Condition_Page.Submit) - as.numeric(Time_Condition_First.Click))
# Summarize by condition with rounding
summary_by_condition <- df %>%
group_by(condition) %>%
summarise(
Mean = round(mean(Time_Diff_Condition, na.rm = TRUE), 2),
Median = round(median(Time_Diff_Condition, na.rm = TRUE), 2),
Min = round(min(Time_Diff_Condition, na.rm = TRUE), 2),
Max = round(max(Time_Diff_Condition, na.rm = TRUE), 2)
) %>%
ungroup()
# Calculate overall statistics with rounding
overall_summary <- summarise(df,
Mean = round(mean(Time_Diff_Condition, na.rm = TRUE), 2),
Median = round(median(Time_Diff_Condition, na.rm = TRUE), 2),
Min = round(min(Time_Diff_Condition, na.rm = TRUE), 2),
Max = round(max(Time_Diff_Condition, na.rm = TRUE), 2)
) %>%
mutate(condition = "Overall") %>%
select(condition, everything())  # Ensures condition is the first column
# Add the overall summary as the first row
final_summary <- bind_rows(overall_summary, summary_by_condition)
# Ensure condition is the first column
times_condition <- final_summary %>%
select(condition, everything())
print(times_condition)
####### ALL TIMES #######
df <- df %>%
mutate(
Time_Diff_Validation = as.numeric(Time_Validation_Page.Submit) - as.numeric(Time_Validation_First.Click),
Time_Diff_Condition = as.numeric(Time_Condition_Page.Submit) - as.numeric(Time_Condition_First.Click),
Time_Diff_Confidence = as.numeric(Time_Confidence_Page.Submit) - as.numeric(Time_Confidence_First.Click),
Time_Diff_DebtAversion = as.numeric(Time_DebtAversion_Page.Submit) - as.numeric(Time_DebtAversion_First.Click),
Time_Diff_FinancialLitera = as.numeric(Time_FinancialLitera_Page.Submit) - as.numeric(Time_FinancialLitera_First.Click),
Time_Diff_LateFees = (as.numeric(Time_LateFees1_Page.Submit) - as.numeric(Time_LateFees1_First.Click)) +
(as.numeric(Time_LateFees2_Page.Submit) - as.numeric(Time_LateFees2_First.Click)),
Time_Diff_Demo = as.numeric(Time_Demo_Page.Submit) - as.numeric(Time_Demo_First.Click)
)
summarize_time <- function(data_vector) {
round(c(
Mean = mean(data_vector, na.rm = TRUE),
Median = median(data_vector, na.rm = TRUE),
Min = min(data_vector, na.rm = TRUE),
Max = max(data_vector, na.rm = TRUE)
), 2)
}
summary_table <- data.frame(
Validation = summarize_time(df$Time_Diff_Validation),
Condition = summarize_time(df$Time_Diff_Condition),
Confidence = summarize_time(df$Time_Diff_Confidence),
FinancialLitera = summarize_time(df$Time_Diff_FinancialLitera),
LateFees = summarize_time(df$Time_Diff_LateFees),
DebtAversion = summarize_time(df$Time_Diff_DebtAversion),
Demografics = summarize_time(df$Time_Diff_Demo),
Overall = summarize_time(df$Time.taken)
)
# Transpose the dataframe to get the desired format
summary_table <- t(summary_table)
colnames(summary_table) <- c("Mean", "Median", "Min", "Max")
# Optionally convert to a more print-friendly format like a tibble
all_times <- as_tibble(summary_table, rownames = "Condition")
print(all_times)
####### INDIVIDUAL CHECK #######
# Detail
# Subset the data
data_table <- df[, c("PROLIFIC_PID", "random_latefees", "LateFees1", "LateFees2", "FL1", "FL2", "FL3")]
# Set PROLIFIC_PID as rownames
rownames(data_table) <- data_table$PROLIFIC_PID
data_table$PROLIFIC_PID <- NULL  # Remove the PROLIFIC_PID column as it's now the rowname
# Define correct answers
correct_answers <- c(random_latefees = "-",
LateFees1 = "$37",
LateFees2 = "$1,355",
FL1 = "More than $102",
FL2 = "Less than today",
FL3 = "False")
# Convert correct answers to a dataframe and set rownames
correct_answers_df <- as.data.frame(t(correct_answers), stringsAsFactors = FALSE)
rownames(correct_answers_df) <- "Correct Answers"
# Combine correct answers with the main data
detail_answers <- rbind(correct_answers_df, data_table)
print(detail_answers)
# Correct answer by ID
# Subset the data
data_table <- df[, c("PROLIFIC_PID", "LateFees1", "LateFees2", "FL1", "FL2", "FL3")]
# Correct answers vector
correct_answers <- c(LateFees1 = "$37", LateFees2 = "$1,355", FL1 = "More than $102", FL2 = "Less than today", FL3 = "False")
# Function to count correct answers
count_correct <- function(row) {
correct_counts <- row == correct_answers
sum(correct_counts, na.rm = TRUE)  # Sum the TRUE values, ignore NA values
}
# Apply the function to each row, not including the 'PROLIFIC_PID' column
correct_counts <- apply(data_table[, -1], 1, count_correct)  # Exclude the first column in the apply function
# Create a result table
result_table <- data.frame(PROLIFIC_PID = data_table$PROLIFIC_PID, Correct_Answers = correct_counts)
# Set PROLIFIC_PID as rownames
rownames(result_table) <- result_table$PROLIFIC_PID
result_table$PROLIFIC_PID <- NULL  # Optionally remove the PROLIFIC_PID column
correct_answers_id = result_table
# Correct answers to dataframe
correct_answers_id <- correct_answers_id %>%
rownames_to_column(var = "PROLIFIC_PID")
df <- df %>%
left_join(correct_answers_id, by = "PROLIFIC_PID")
# Print the result table
print(correct_answers_id)
# Create the bar graph
ggplot(correct_answers_id, aes(x = Correct_Answers)) +
geom_bar() +
labs(title = "Frequency of Correct Answers",
x = "Correct Answers",
y = "Count") +
theme_minimal()
# Correct answer by question
# Define the questions and their correct answers
questions <- c("LateFees1", "LateFees2", "FL1", "FL2", "FL3")
correct_answers <- c(LateFees1 = "$37", LateFees2 = "$1,355", FL1 = "More than $102", FL2 = "Less than today", FL3 = "False")
# Create a dataframe for the correct answers to facilitate comparison
correct_answers_df <- as.data.frame(correct_answers, stringsAsFactors = FALSE)
names(correct_answers_df) <- "CorrectAnswer"
# Function to count correct responses per question
count_correct_per_question <- function(question) {
sum(df[[question]] == correct_answers[question], na.rm = TRUE)
}
# Apply the function to each question
correct_counts <- sapply(questions, count_correct_per_question)
# Create the final table
final_table <- data.frame(Question = questions, People_Correct = correct_counts)
rownames(final_table) <- final_table$Question
final_table$Question <- NULL  # Optionally remove the Question column since it's now the rowname
correct_answers_question = final_table
# Print the result
print(final_table)
View(df[,c("condition","sliderCounts", "sliderValue", "tableClickButton")])
######## Otros graficos ##########
# Income
df$Demo_Income <- factor(df$Demo_Income, levels = c(
"$24,999 or under",
"$25,000 to $44,999",
"$45,000 to $64,999",
"$65,000 to $94,999",
"$95,000 to $134,999",
"$135,000 to $249,999",
"$250,000 or over"
))
ggplot(df, aes(x = Demo_Income)) +
geom_bar() +
labs(title = "Frequency of Income Ranges",
x = "Income Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Income x Correct answers
# Relevel the Demo_Income column
df$Demo_Income <- factor(df$Demo_Income, levels = c(
"$24,999 or under",
"$25,000 to $44,999",
"$45,000 to $64,999",
"$65,000 to $94,999",
"$95,000 to $134,999",
"$135,000 to $249,999",
"$250,000 or over"
))
# Create the grouped bar graph
ggplot(df, aes(x = Demo_Income, fill = as.factor(Correct_Answers))) +
geom_bar(position = "dodge") +
labs(title = "Income Level and Number of Correct Answers",
x = "Income Level",
y = "Count",
fill = "Number of Correct Answers") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
######## % de pago ######
# reorder levels
df$condition <- as.factor(df$condition)
df$condition <- factor(df$condition, levels = c("Control", "SB", "Table", "SliderLow", "SliderHigh"))
# Check for and combine main columns into "Decision"
df <- df %>%
rowwise() %>%
mutate(Decision = list(na.omit(c(Control, SB, Table, SliderLow, SliderHigh)))) %>%
mutate(Decision = ifelse(length(Decision) == 1, unlist(Decision), "ERROR"))
# Check for and combine _TEXT columns into "Decision_Other"
df <- df %>%
rowwise() %>%
mutate(Decision_Other = list(na.omit(c(Control_3_TEXT, SB_3_TEXT, Table_3_TEXT, SliderLow_6_TEXT, SliderHigh_6_TEXT)))) %>%
mutate(Decision_Other = ifelse(length(Decision_Other) <= 1, unlist(Decision_Other), "ERROR"))
# Ungroup the dataframe
df <- df %>%
ungroup()
# Columna pago
df <- df %>%
mutate(Payment = case_when(
Decision == "Statement balance" ~ 1678,
Decision == "Minimum payment" ~ 34,
Decision == "Other amount ($)" ~ as.numeric(Decision_Other),
TRUE ~ NA_real_  # for any other cases
))
# Pago rango
df <- df %>%
mutate(Payment_range = cut(Payment,
breaks = c(0, 34, 35, 1678, 1679),
labels = c("Less than 34", "34", "34 to 1677", "1678"),
right = FALSE))
# Create the bar plot
ggplot(df, aes(x = Payment_range)) +
geom_bar() +
labs(title = "Frequency of Payment Ranges",
x = "Payment Range",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the bar plot with grouped bars for each condition
ggplot(df, aes(x = Payment_range, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Frequency of Payment Ranges by Condition",
x = "Payment Range",
y = "Count",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Same but in percentages
# Convert df$condition to a factor with specified levels
df$condition <- factor(df$condition, levels = c("Control", "SB", "Table", "SliderLow", "SliderHigh"))
# Calculate the proportions for each Payment_range within each condition
df_proportions <- df %>%
group_by(condition, Payment_range) %>%
summarise(count = n()) %>%
mutate(proportion = count / sum(count) * 100)
# Create the bar plot with proportions
ggplot(df_proportions, aes(x = Payment_range, y = proportion, fill = condition)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Percentage of Payment Ranges by Condition",
x = "Payment Range",
y = "Percentage",
fill = "Condition") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
######### Regresion ######
# Step 1: Normalize the Payment column
df$Payment_percentage <- df$Payment / max(df$Payment)
# Step 2: Create dummy variables for the conditions
df$SB <- ifelse(df$condition == "SB", 1, 0)
df$Table <- ifelse(df$condition == "Table", 1, 0)
df$SliderLow <- ifelse(df$condition == "SliderLow", 1, 0)
df$SliderHigh <- ifelse(df$condition == "SliderHigh", 1, 0)
# Step 3: Run linear regressions
model_SB <- lm(Payment_percentage ~ SB, data = df)
model_Table <- lm(Payment_percentage ~ Table, data = df)
model_SliderLow <- lm(Payment_percentage ~ SliderLow, data = df)
model_SliderHigh <- lm(Payment_percentage ~ SliderHigh, data = df)
# Step 4: Summarize all regressions in one table
summary_SB <- summary(model_SB)
summary_Table <- summary(model_Table)
summary_SliderLow <- summary(model_SliderLow)
summary_SliderHigh <- summary(model_SliderHigh)
# Print summaries
summary_SB
summary_Table
summary_SliderLow
summary_SliderHigh
# Optionally, create a combined table for all regression summaries
library(broom)
tidy_SB <- tidy(model_SB)
tidy_Table <- tidy(model_Table)
tidy_SliderLow <- tidy(model_SliderLow)
tidy_SliderHigh <- tidy(model_SliderHigh)
combined_summary <- rbind(tidy_SB, tidy_Table, tidy_SliderLow, tidy_SliderHigh)
print(combined_summary)
