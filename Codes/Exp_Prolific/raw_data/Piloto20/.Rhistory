# Limpia variables existentes
rm(list=ls())				  # clear the list of objects
graphics.off()				# clear the list of graphs
options(digits = 4)		# number of digits to display
# Paquetes
library(rpart)    #Modelo Machine Learning Arbol o Rpart
library(rattle)   #FancyRpartplot  grafico arbol
library(dplyr)    #Funcion if_else y para trabajar tablas
library(ggplot2)  #Graficos
library(caret)
library(randomForest)
library(reshape2)
library(corrplot)
#load required library
library(e1071)
library(ROSE) #Curva ROC y c√°lculo AUC
# Ruta to WalmartColas
MAIN_PATH = "/Users/RodrigoGuerra/Dropbox/WalmartColas/"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
# Archivo con info de los locales
info_stores = read.csv(paste0(MAIN_PATH, "Fase II/Datos Extras/Info Locales/output/info_locales.csv"))
# Abrir datos matching
df = read.csv("data/df_ml_REG.csv")
# Reporte Matching
df_report = read.csv("data/report_matching_REG.csv")
# Filtrar dias con matching malo
source("delete_noise.R")
df = delete_noise_reg(df, df_report)
# Ruta to WalmartColas
MAIN_PATH = "/Users/rodrigoguerra/Dropbox (CSP)/WalmartColas"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
# Archivo con info de los locales
info_stores = read.csv(paste0(MAIN_PATH, "Fase II/Datos Extras/Info Locales/output/info_locales.csv"))
# Abrir datos matching
df = read.csv("data/df_ml_REG.csv")
# Reporte Matching
df_report = read.csv("data/report_matching_REG.csv")
df_report = read.csv("data/report_matching_REG.csv")
MAIN_PATH = "/Users/rodrigoguerra/Dropbox (CSP)/WalmartColas"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
thefile <- "/Users/rodrigoguerra/Dropbox (CSP)/202401 - DCCP/Ofertas_licitaciones_short.rds"
d <-  readRDS(filename)
filename <- "/Users/rodrigoguerra/Dropbox (CSP)/202401 - DCCP/Ofertas_licitaciones_short.rds"
d <-  readRDS(filename)
View(d)
####### SETUP #######
rm(list=ls())
library(dplyr)
library(htmltools)
library(kableExtra)
library(knitr)
library(htmlTable)
library(ggplot2)
library(scales)
library(readxl)
# location
setwd("/Users/rodrigoguerra/Library/Mobile Documents/com~apple~CloudDocs/Paper Credito/Piloto20/")
####### DATA PREPROCESSING #######
# Load
qualtrics <- read.csv("Fondef_Ex4_May 12, 2024_04.55.csv",na.strings=c(''))
prolific <- read.csv("prolific_export_6635385c5b11cbeb1f9f01f8.csv",na.strings=c(''))
# Clean first row
qualtrics <- qualtrics[c(-1,-2),]
# Checks
# Check for duplicates in qualtrics
## Personas que tomaron dos veces la encuestas
duplicates_qualtrics <- qualtrics %>%
group_by(PROLIFIC_PID) %>%
filter(n() > 1) %>%
ungroup()
# Drop duplicated
qualtrics <- qualtrics %>%
group_by(PROLIFIC_PID) %>%
slice_tail(n = 1) %>%
ungroup()
# Listar aquellos que estan solo en prolific o solo en qualtrics
qualtrics_not_in_prolific <- anti_join(qualtrics, prolific,
by = c("PROLIFIC_PID" = "Participant.id"))
prolific_not_in_qualtrics <- anti_join(prolific, qualtrics,
by = c("Participant.id" = "PROLIFIC_PID"))
rm(duplicates_qualtrics,
qualtrics_not_in_prolific,
prolific_not_in_qualtrics)
# Merge
df <- merge(qualtrics, prolific,
by.x = "PROLIFIC_PID", by.y = "Participant.id",
all.x = TRUE)
####### TIMES CONDITION #######
# Condition
# Calculate time differences and rename the column
df <- df %>%
mutate(Time_Diff_Condition = as.numeric(Time_Condition_Page.Submit) - as.numeric(Time_Condition_First.Click))
# Summarize by condition with rounding
summary_by_condition <- df %>%
group_by(condition) %>%
summarise(
Mean = round(mean(Time_Diff_Condition, na.rm = TRUE), 2),
Median = round(median(Time_Diff_Condition, na.rm = TRUE), 2),
Min = round(min(Time_Diff_Condition, na.rm = TRUE), 2),
Max = round(max(Time_Diff_Condition, na.rm = TRUE), 2)
) %>%
ungroup()
# Calculate overall statistics with rounding
overall_summary <- summarise(df,
Mean = round(mean(Time_Diff_Condition, na.rm = TRUE), 2),
Median = round(median(Time_Diff_Condition, na.rm = TRUE), 2),
Min = round(min(Time_Diff_Condition, na.rm = TRUE), 2),
Max = round(max(Time_Diff_Condition, na.rm = TRUE), 2)
) %>%
mutate(condition = "Overall") %>%
select(condition, everything())  # Ensures condition is the first column
# Add the overall summary as the first row
final_summary <- bind_rows(overall_summary, summary_by_condition)
# Ensure condition is the first column
times_condition <- final_summary %>%
select(condition, everything())
print(times_condition)
####### ALL TIMES #######
df <- df %>%
mutate(
Time_Diff_Condition = as.numeric(Time_Condition_Page.Submit) - as.numeric(Time_Condition_First.Click),
Time_Diff_Confidence = as.numeric(Time_Confidence_Page.Submit) - as.numeric(Time_Confidence_First.Click),
Time_Diff_CreditCardUse = as.numeric(Time_CreditCardUse_Page.Submit) - as.numeric(Time_CreditCardUse_First.Click),
Time_Diff_DebtAversion = as.numeric(Time_DebtAversion_Page.Submit) - as.numeric(Time_DebtAversion_First.Click),
Time_Diff_FinancialLitera = as.numeric(Time_FinancialLitera_Page.Submit) - as.numeric(Time_FinancialLitera_First.Click),
Time_Diff_InterTemporal = as.numeric(Time_InterTemporal_Page.Submit) - as.numeric(Time_InterTemporal_First.Click),
Time_Diff_LateFees = (as.numeric(Time_LateFees1_Page.Submit) - as.numeric(Time_LateFees1_First.Click)) +
(as.numeric(Time_LateFees2_Page.Submit) - as.numeric(Time_LateFees2_First.Click))
)
summarize_time <- function(data_vector) {
round(c(
Mean = mean(data_vector, na.rm = TRUE),
Median = median(data_vector, na.rm = TRUE),
Min = min(data_vector, na.rm = TRUE),
Max = max(data_vector, na.rm = TRUE)
), 2)
}
summary_table <- data.frame(
Condition = summarize_time(df$Time_Diff_Condition),
Confidence = summarize_time(df$Time_Diff_Confidence),
CreditCardUse = summarize_time(df$Time_Diff_CreditCardUse),
DebtAversion = summarize_time(df$Time_Diff_DebtAversion),
FinancialLitera = summarize_time(df$Time_Diff_FinancialLitera),
LateFees = summarize_time(df$Time_Diff_LateFees),
Overall = summarize_time(df$Time.taken)
)
# Transpose the dataframe to get the desired format
summary_table <- t(summary_table)
colnames(summary_table) <- c("Mean", "Median", "Min", "Max")
# Optionally convert to a more print-friendly format like a tibble
all_times <- as_tibble(summary_table, rownames = "Condition")
print(all_times)
####### INDIVIDUAL CHECK #######
# Detail
# Subset the data
data_table <- df[, c("PROLIFIC_PID", "random_latefees", "LateFees1", "LateFees2", "FL1", "FL2", "FL3")]
# Set PROLIFIC_PID as rownames
rownames(data_table) <- data_table$PROLIFIC_PID
data_table$PROLIFIC_PID <- NULL  # Remove the PROLIFIC_PID column as it's now the rowname
# Define correct answers
correct_answers <- c(random_latefees = "-",
LateFees1 = "$37",
LateFees2 = "$1,355",
FL1 = "More than $102",
FL2 = "Less than today",
FL3 = "False")
# Convert correct answers to a dataframe and set rownames
correct_answers_df <- as.data.frame(t(correct_answers), stringsAsFactors = FALSE)
rownames(correct_answers_df) <- "Correct Answers"
# Combine correct answers with the main data
detail_answers <- rbind(correct_answers_df, data_table)
print(detail_answers)
# Correct answer by ID
# Subset the data
data_table <- df[, c("PROLIFIC_PID", "LateFees1", "LateFees2", "FL1", "FL2", "FL3")]
# Correct answers vector
correct_answers <- c(LateFees1 = "$37", LateFees2 = "$1,355", FL1 = "More than $102", FL2 = "Less than today", FL3 = "False")
# Function to count correct answers
count_correct <- function(row) {
correct_counts <- row == correct_answers
sum(correct_counts, na.rm = TRUE)  # Sum the TRUE values, ignore NA values
}
# Apply the function to each row, not including the 'PROLIFIC_PID' column
correct_counts <- apply(data_table[, -1], 1, count_correct)  # Exclude the first column in the apply function
# Create a result table
result_table <- data.frame(PROLIFIC_PID = data_table$PROLIFIC_PID, Correct_Answers = correct_counts)
# Set PROLIFIC_PID as rownames
rownames(result_table) <- result_table$PROLIFIC_PID
result_table$PROLIFIC_PID <- NULL  # Optionally remove the PROLIFIC_PID column
correct_answers_id = result_table
# Print the result table
print(correct_answers_id)
# Correct answer by question
# Define the questions and their correct answers
questions <- c("LateFees1", "LateFees2", "FL1", "FL2", "FL3")
correct_answers <- c(LateFees1 = "$37", LateFees2 = "$1,355", FL1 = "More than $102", FL2 = "Less than today", FL3 = "False")
# Create a dataframe for the correct answers to facilitate comparison
correct_answers_df <- as.data.frame(correct_answers, stringsAsFactors = FALSE)
names(correct_answers_df) <- "CorrectAnswer"
# Function to count correct responses per question
count_correct_per_question <- function(question) {
sum(df[[question]] == correct_answers[question], na.rm = TRUE)
}
# Apply the function to each question
correct_counts <- sapply(questions, count_correct_per_question)
# Create the final table
final_table <- data.frame(Question = questions, People_Correct = correct_counts)
rownames(final_table) <- final_table$Question
final_table$Question <- NULL  # Optionally remove the Question column since it's now the rowname
correct_answers_question = final_table
# Print the result
print(final_table)
View(df[,c("condition","sliderCounts", "sliderValue", "tableClickButton")])
View(df)
df$Age
df$Age
df$Demo_Age.
df$Demo_gender
df$Sex
