# Limpia variables existentes
rm(list=ls())				  # clear the list of objects
graphics.off()				# clear the list of graphs
options(digits = 4)		# number of digits to display
# Paquetes
library(rpart)    #Modelo Machine Learning Arbol o Rpart
library(rattle)   #FancyRpartplot  grafico arbol
library(dplyr)    #Funcion if_else y para trabajar tablas
library(ggplot2)  #Graficos
library(caret)
library(randomForest)
library(reshape2)
library(corrplot)
#load required library
library(e1071)
library(ROSE) #Curva ROC y c√°lculo AUC
# Ruta to WalmartColas
MAIN_PATH = "/Users/RodrigoGuerra/Dropbox/WalmartColas/"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
# Archivo con info de los locales
info_stores = read.csv(paste0(MAIN_PATH, "Fase II/Datos Extras/Info Locales/output/info_locales.csv"))
# Abrir datos matching
df = read.csv("data/df_ml_REG.csv")
# Reporte Matching
df_report = read.csv("data/report_matching_REG.csv")
# Filtrar dias con matching malo
source("delete_noise.R")
df = delete_noise_reg(df, df_report)
# Ruta to WalmartColas
MAIN_PATH = "/Users/rodrigoguerra/Dropbox (CSP)/WalmartColas"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
# Archivo con info de los locales
info_stores = read.csv(paste0(MAIN_PATH, "Fase II/Datos Extras/Info Locales/output/info_locales.csv"))
# Abrir datos matching
df = read.csv("data/df_ml_REG.csv")
# Reporte Matching
df_report = read.csv("data/report_matching_REG.csv")
df_report = read.csv("data/report_matching_REG.csv")
MAIN_PATH = "/Users/rodrigoguerra/Dropbox (CSP)/WalmartColas"
# Wroking directory
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
setwd(paste0(MAIN_PATH,"Fase II/ML/"))
thefile <- "/Users/rodrigoguerra/Dropbox (CSP)/202401 - DCCP/Ofertas_licitaciones_short.rds"
d <-  readRDS(filename)
filename <- "/Users/rodrigoguerra/Dropbox (CSP)/202401 - DCCP/Ofertas_licitaciones_short.rds"
d <-  readRDS(filename)
View(d)
###### Setup ######
# Libraries
rm(list=ls())
library(gridExtra)
library(dplyr)
library(tidyr)
library(stargazer)
library(reshape2)
library(htmltools)
library(htmlTable)
library(kableExtra)
library(knitr)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
library(lmtest)
library(sandwich)
# Location
file_path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_path)
# Open data
df <- read.csv("processed_data/ProcessedData.csv")
df$Income
df$Sex
reg_male <- main_regression_table(df[df$Sex=="Male",])
###### Setup ######
# Libraries
rm(list=ls())
library(gridExtra)
library(dplyr)
library(tidyr)
library(stargazer)
library(reshape2)
library(htmltools)
library(htmlTable)
library(kableExtra)
library(knitr)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
library(lmtest)
library(sandwich)
# Location
file_path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_path)
# Open data
df <- read.csv("processed_data/ProcessedData.csv")
##### Main regressions ######
main_regression_table <- function(df, robust_errors = TRUE, extension = "html"){
df$Payment <- df$Payment/1678
r_payment <- lm(Payment ~ condition, data = df)
r_lessmin <- lm(LessMin ~ condition, data = df)
r_min <- lm(Min ~ condition, data = df)
r_partial <- lm(Partial ~ condition, data = df)
r_total <- lm(Total ~ condition, data = df)
if(robust_errors==TRUE){
# Function that Put robust errors on the ols regs
get_robust_se <- function(lm_obj) {
coeftest_obj <- coeftest(lm_obj, vcov = vcovHC(lm_obj, type="HC0"))
se <- coeftest_obj[, "Std. Error"]
pval <- coeftest_obj[, "Pr(>|t|)"]
return(se)
}
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL,
se = list(
get_robust_se(r_payment),
get_robust_se(r_min),
get_robust_se(r_partial),
get_robust_se(r_total)))
})
}
else{
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL)
})
}
return(t)
}
reg_male <- main_regression_table(df[df$Sex=="Male",])
reg_male
###### Setup ######
# Libraries
rm(list=ls())
library(gridExtra)
library(dplyr)
library(tidyr)
library(stargazer)
library(reshape2)
library(htmltools)
library(htmlTable)
library(kableExtra)
library(knitr)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
library(lmtest)
library(sandwich)
# Location
file_path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_path)
# Open data
df <- read.csv("processed_data/ProcessedData.csv")
##### Main regressions ######
main_regression_table <- function(df, robust_errors = TRUE, extension = "html"){
df$Payment <- df$Payment/1678
r_payment <- lm(Payment ~ condition, data = df)
r_lessmin <- lm(LessMin ~ condition, data = df)
r_min <- lm(Min ~ condition, data = df)
r_partial <- lm(Partial ~ condition, data = df)
r_total <- lm(Total ~ condition, data = df)
if(robust_errors==TRUE){
# Function that Put robust errors on the ols regs
get_robust_se <- function(lm_obj) {
coeftest_obj <- coeftest(lm_obj, vcov = vcovHC(lm_obj, type="HC0"))
se <- coeftest_obj[, "Std. Error"]
pval <- coeftest_obj[, "Pr(>|t|)"]
return(se)
}
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL,
se = list(
get_robust_se(r_payment),
get_robust_se(r_min),
get_robust_se(r_partial),
get_robust_se(r_total)))
})
}
else{
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL)
})
}
return(t)
}
reg_male <- main_regression_table(df[df$Sex=="Male",])
reg_female <- main_regression_table(df[df$Sex=="Female",])
####### HTML Report ######
# Create HTML content
html_content <- tagList(
tags$html(
tags$head(
tags$title("Netquest Report")
),
tags$body(
tags$h1("Regression No Controls (robust errors white)"),
tags$h3("Sex, Female"),
HTML(reg_female),
tags$h3("Sex, Male"),
HTML(reg_male)
)
)
)
# Write the HTML content to a file
save_html(html_content, file = "reportNetquest.html")
df$CorrectFL
reg_lowfl <- main_regression_table(df[df$CorrectFL<3,])
reg_highfl <- main_regression_table(df[df$CorrectFL==3,])
###### Setup ######
# Libraries
rm(list=ls())
library(gridExtra)
library(dplyr)
library(tidyr)
library(stargazer)
library(reshape2)
library(htmltools)
library(htmlTable)
library(kableExtra)
library(knitr)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
library(lmtest)
library(sandwich)
# Location
file_path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_path)
# Open data
df <- read.csv("processed_data/ProcessedData.csv")
##### Main regressions ######
main_regression_table <- function(df, robust_errors = TRUE, extension = "html"){
df$Payment <- df$Payment/1678
r_payment <- lm(Payment ~ condition, data = df)
r_lessmin <- lm(LessMin ~ condition, data = df)
r_min <- lm(Min ~ condition, data = df)
r_partial <- lm(Partial ~ condition, data = df)
r_total <- lm(Total ~ condition, data = df)
if(robust_errors==TRUE){
# Function that Put robust errors on the ols regs
get_robust_se <- function(lm_obj) {
coeftest_obj <- coeftest(lm_obj, vcov = vcovHC(lm_obj, type="HC0"))
se <- coeftest_obj[, "Std. Error"]
pval <- coeftest_obj[, "Pr(>|t|)"]
return(se)
}
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL,
se = list(
get_robust_se(r_payment),
get_robust_se(r_min),
get_robust_se(r_partial),
get_robust_se(r_total)))
})
}
else{
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL)
})
}
return(t)
}
reg_male <- main_regression_table(df[df$Sex=="Male",])
reg_female <- main_regression_table(df[df$Sex=="Female",])
reg_lowfl <- main_regression_table(df[df$CorrectFL<3,])
reg_highfl <- main_regression_table(df[df$CorrectFL==3,])
####### HTML Report ######
# Create HTML content
html_content <- tagList(
tags$html(
tags$head(
tags$title("Netquest Report")
),
tags$body(
tags$h1("Regression No Controls (robust errors white)"),
tags$h3("Sex, Female"),
HTML(reg_female),
tags$h3("Sex, Male"),
HTML(reg_male),
tags$h3("Low Financial Literacy"),
HTML(reg_female),
tags$h3("High Financial Literacy"),
HTML(reg_male)
)
)
)
# Write the HTML content to a file
save_html(html_content, file = "reportNetquest.html")
table(df$condition)
table(df[df$Sex=="Male",]$condition)
table(df[df$CorrectFL<3,]$condition)
table(df[df$CorrectFL==3,]$condition)
df$Education
table(df$Education)
df[df$Education %in% c("LessThanHS","HighSchool",SomeCollege"),]
""
df[df$Education %in% c("LessThanHS","HighSchool","SomeCollege"),]
df[df$Education %in% c("LessThanHS","HighSchool","SomeCollege"),]
table(df$Education)
###### Setup ######
# Libraries
rm(list=ls())
library(gridExtra)
library(dplyr)
library(tidyr)
library(stargazer)
library(reshape2)
library(htmltools)
library(htmlTable)
library(kableExtra)
library(knitr)
library(ggplot2)
library(scales)
library(readxl)
library(tibble)
library(lmtest)
library(sandwich)
# Location
file_path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(file_path)
# Open data
df <- read.csv("processed_data/ProcessedData.csv")
##### Main regressions ######
main_regression_table <- function(df, robust_errors = TRUE, extension = "html"){
df$Payment <- df$Payment/1678
r_payment <- lm(Payment ~ condition, data = df)
r_lessmin <- lm(LessMin ~ condition, data = df)
r_min <- lm(Min ~ condition, data = df)
r_partial <- lm(Partial ~ condition, data = df)
r_total <- lm(Total ~ condition, data = df)
if(robust_errors==TRUE){
# Function that Put robust errors on the ols regs
get_robust_se <- function(lm_obj) {
coeftest_obj <- coeftest(lm_obj, vcov = vcovHC(lm_obj, type="HC0"))
se <- coeftest_obj[, "Std. Error"]
pval <- coeftest_obj[, "Pr(>|t|)"]
return(se)
}
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL,
se = list(
get_robust_se(r_payment),
get_robust_se(r_min),
get_robust_se(r_partial),
get_robust_se(r_total)))
})
}
else{
t <- capture.output({
stargazer(r_payment, r_min, r_partial, r_total,
type = extension,
style = "default",
column.labels = c("Payment", "Min", "Partial", "Total"),
ci = TRUE, ci.level = 0.95, # Include confidence intervals
p.auto = TRUE, # Include p-values
report = "vcsp*", # Include variance, coefficients, standard errors, t-stats, p-values
out = NULL)
})
}
return(t)
}
reg_male <- main_regression_table(df[df$Sex=="Male",])
reg_female <- main_regression_table(df[df$Sex=="Female",])
reg_lowfl <- main_regression_table(df[df$CorrectFL<3,])
reg_highfl <- main_regression_table(df[df$CorrectFL==3,])
reg_lowedu <- main_regression_table(df[df$Education %in% c("LessThanHS","HighSchool","SomeCollege"),])
reg_highedu <- main_regression_table(df[df$Education %in% c("Bachelors","Advanced"),])
####### HTML Report ######
# Create HTML content
html_content <- tagList(
tags$html(
tags$head(
tags$title("Netquest Report")
),
tags$body(
tags$h1("Regression No Controls (robust errors white)"),
tags$h3("Sex, Female"),
HTML(reg_female),
tags$h3("Sex, Male"),
HTML(reg_male),
tags$h3("Low Financial Literacy"),
HTML(reg_lowfl),
tags$h3("High Financial Literacy"),
HTML(reg_highfl),
tags$h3("Low Education"),
HTML(reg_lowedu),
tags$h3("High Education"),
HTML(reg_highedu)
)
)
)
# Write the HTML content to a file
save_html(html_content, file = "reportNetquest.html")
